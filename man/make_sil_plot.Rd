% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_sil_plot.R
\name{make_sil_plot}
\alias{make_sil_plot}
\title{Make a silhouette plot from a silhouette dataframe}
\usage{
make_sil_plot(
  sil_df,
  clust_col = "cluster",
  clust_colours = NULL,
  include_labels = length(unique(sil_df[clust_col][[1]])) < 30
)
}
\arguments{
\item{sil_df}{Silhouette dataframe. See \code{make_sil_df()}.}

\item{clust_col}{Character name of column in \code{sil_df} containing the clusters.}

\item{clust_colours}{If null (default) \code{viridis::viridis} is used to colour
clusters. Otherwise a dataframe with clusters and their associated colours.
Needs to be the same length as levels in \code{clust_col} (or \code{levs}).}

\item{include_labels}{Logical. Include cluster labels on plot? Can get very
crowded if there are many clusters.}
}
\value{
ggplot object
}
\description{
Make a silhouette plot from a silhouette dataframe
}
\examples{

# data from: https://www.davidzeleny.net/anadat-r/doku.php/en:data:dune
bio_wide <- read.delim('https://raw.githubusercontent.com/zdealveindy/anadat-r/master/data/dune2.spe.txt', row.names = 1) |>
  tibble::as_tibble()

bio_long <- bio_wide |>
  dplyr::mutate(site_id = dplyr::row_number()) |>
  tidyr::pivot_longer(cols = - site_id)

sites <- read.delim('https://raw.githubusercontent.com/zdealveindy/anadat-r/master/data/dune2.env.txt', row.names = 1) |>
  tibble::as_tibble() |>
  dplyr::mutate(site_id = dplyr::row_number()
                , Moisture = forcats::fct_relevel(as.character(Moisture), "1", "2", "4", "5")
                )

bio_dist <- vegan::vegdist(bio_wide)

use_methods <- c("mcquitty", "ward.D2", "average", "complete")

# make clusters -----------
clusters <- purrr::map(use_methods
                       , \(x) make_clusters(method = x
                                            , dist_obj = bio_dist
                                            , group_range = 2:(nrow(bio_wide) - 1)
                                            , sites = sites
                                            )
                       ) |>
  purrr::set_names(use_methods) |>
  dplyr::bind_rows(.id = "method")

# summarise clusters --------
clusters_summarise <- clusters |>
  dplyr::mutate(summary = purrr::map(clusters, \(x) make_summary_df(x))) |>
  tidyr::unnest(cols = c(summary))

# frequency of taxa --------
clusters_freq <- clusters |>
  dplyr::mutate(freq = purrr::map(clusters, \(x) make_freq_df(clust_df = x
                                                              , bio_df = bio_long
                                                              , context = "site_id"
                                                              )
                                  )
                ) |>
  dplyr::select(-clusters) |>
  tidyr::unnest(cols = c(freq))

# indicator value ---------
clusters_ind_val <- clusters |>
  dplyr::mutate(ind_val = purrr::map(clusters
                                     , \(x) make_ind_val_df(x
                                                            , bio_wide = bio_wide
                                                            , context = "site_id"
                                                            ) |>
                                       tidyr::nest(inds = - cluster) |>
                                       dplyr::mutate(has_ind = purrr::map_lgl(inds
                                                                              , \(x) any(x$p_val <= 0.05)
                                                                              )
                                                     )
                                     )
                , n_ind_clusters = purrr::map_dbl(ind_val
                                                  , \(x) sum(x$has_ind)
                                                  )
                , n_ind_sites = purrr::map2_dbl(ind_val
                                                , clusters
                                                , \(x, y) x |>
                                                  dplyr::inner_join(y) |>
                                                  dplyr::filter(has_ind) |>
                                                  nrow()
                                                )
                , prop_ind_clusters = n_ind_clusters / groups
                , prop_ind_sites = n_ind_sites / nrow(sites)
                ) |>
  dplyr::select(-clusters)

# silhouette width ---------
clusters_sil <- clusters |>
  dplyr::mutate(sil = purrr::map(clusters
                                 , \(x) make_sil_df(x
                                                    , dist_obj = bio_dist
                                                    )
                                 )
                , macro_sil = purrr::map_dbl(sil, \(x) unique(x$macro_sil))
                ) |>
  dplyr::select(-clusters)

# silhouette plot ---------

make_sil_plot(clusters_sil$sil[[1]] |> tidyr::unnest(cols = c(sil)))


# gap statistic --------
clusters_gap <- clusters |>
  dplyr::mutate(gap = purrr::map(clusters
                                 , \(x) make_gap_df(x
                                                    , dist_mat = as.matrix(bio_dist)
                                                    , n_sample = 30
                                                    )
                                 )
                ) |>
  dplyr::select(-clusters) |>
  tidyr::unnest(cols = c(gap))

# explore -------

clusters_explore <- clusters_summarise |>
  dplyr::left_join(clusters_freq) |>
  dplyr::left_join(clusters_ind_val) |>
  dplyr::left_join(clusters_sil) |>
  dplyr::left_join(clusters_gap)

# find a good cluster ---------
best <- clusters_explore |>
  ## min_clust_size is larger than one site
  dplyr::filter(min_clust_size > 1) |>
  ## most clusters have an indicator
  dplyr::filter(prop_ind_clusters > 0.8) |>
  ## high macro_sil
  dplyr::filter(macro_sil > quantile(macro_sil, probs = 0.5)) |>
  ## high macro_gap
  dplyr::filter(macro_gap > quantile(macro_gap, probs = 0.5)) |>
  ## low wss
  dplyr::filter(macro_wss < quantile(macro_wss, probs = 0.5))

# dendogram --------
dend <- make_dend(clust_df = best$clusters[[1]]
                  , dist_obj = bio_dist
                  , method = best$method[[1]]
                  , second_group_col = "Moisture"
                  , label_col = "Moisture"
                  )

plot(dend$dend)
}
