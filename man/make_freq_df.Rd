% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_freq_df.R
\name{make_freq_df}
\alias{make_freq_df}
\title{Proportion of sites and clusters with at least one taxa in common}
\usage{
make_freq_df(
  clust_df = NULL,
  bio_df,
  context,
  clust_col = "cluster",
  taxa_col = "taxa",
  freq_thresh = 0.9
)
}
\arguments{
\item{clust_df}{Dataframe with \code{context} column(s) and a column with cluster
membership for that context. Optional if \code{clust_col} appears in bio_df.}

\item{bio_df}{Dataframe containing the site and taxa data in long format.}

\item{context}{Character. Name(s) of column(s) that define the context.}

\item{clust_col}{Character. Name of column containing cluster membership.}

\item{taxa_col}{Character. Name of column containing the taxa names.}

\item{freq_thresh}{Proportion of sites within a cluster that a taxa should be
present}
}
\value{
Single row dataframe of \code{prop_freq_clusters} and \code{prop_freq_sites}
}
\description{
Creates a dataframe of proportion of clusters (and contexts within those
clusters) that contain at least one taxa present in greater than \code{freq_thres}
proportion of that clusters contexts. Contexts are usually sites.
}
\examples{

# data from: https://www.davidzeleny.net/anadat-r/doku.php/en:data:dune
bio_wide <- read.delim('https://raw.githubusercontent.com/zdealveindy/anadat-r/master/data/dune2.spe.txt', row.names = 1) |>
  tibble::as_tibble() |>
  dplyr::mutate(site_id = dplyr::row_number())

bio_long <- bio_wide |>
  tidyr::pivot_longer(cols = - site_id)

sites <- read.delim('https://raw.githubusercontent.com/zdealveindy/anadat-r/master/data/dune2.env.txt', row.names = 1) |>
  tibble::as_tibble() |>
  dplyr::mutate(site_id = dplyr::row_number()
                , Moisture = forcats::fct_relevel(as.character(Moisture), "1", "2", "4", "5")
                )

dist_bio <- vegan::vegdist(bio_wide)

dist_env <- dist(sites |>
                   dplyr::select(where(is.numeric))
                 )

use_methods <- tibble::tibble(method = c("mcquitty", "average", "complete", "geo", "geo")
                              , alpha = c(NA, NA, NA, 0.1, 0.3)
                              )

# make dendograms ------
dends <- use_methods |>
  dplyr::mutate(dend = purrr::map2(method
                                   , alpha
                                   , \(x, y) make_dend(method = x
                                                       , dist_bio = dist_bio
                                                       , dist_env = dist_env
                                                       , geo_alpha = y
                                                       )
                                   )
                )

# make clusters -----------
clusters <- dends |>
  dplyr::mutate(clusters = purrr::map(dend
                                      , \(x) make_clusters(x
                                                           , group_range = 2:(nrow(bio_wide) - 1)
                                                           , sites = sites
                                                           )
                                      )
                ) |>
  tidyr::unnest(cols = c(clusters))

# summarise clusters --------
clusters_summarise <- clusters |>
  dplyr::mutate(summary = purrr::map(clusters, \(x) make_summary_df(x))) |>
  tidyr::unnest(cols = c(summary))

# frequency of taxa --------
clusters_freq <- clusters |>
  dplyr::mutate(freq = purrr::map(clusters, \(x) make_freq_df(clust_df = x
                                                              , bio_df = bio_long
                                                              , context = "site_id"
                                                              )
                                  )
                ) |>
  dplyr::select(-clusters) |>
  tidyr::unnest(cols = c(freq))

# indicator value ---------
clusters_ind_val <- clusters |>
  dplyr::mutate(ind_val = purrr::map(clusters
                                     , \(x) make_ind_val_df(x
                                                            , bio_wide = bio_wide
                                                            , context = "site_id"
                                                            )
                                     )
                ) |>
  dplyr::select(-clusters) |>
  tidyr::unnest(cols = c(ind_val))

# silhouette width ---------
clusters_sil <- clusters |>
  dplyr::mutate(sil = purrr::map(clusters
                                 , \(x) make_sil_df(x
                                                    , dist_obj = bio_dist
                                                    )
                                 )
                ) |>
  dplyr::select(-clusters) |>
  tidyr::unnest(cols = c(sil))


# gap statistic --------
clusters_gap <- clusters |>
  dplyr::mutate(gap = purrr::map(clusters
                                 , \(x) make_gap_df(x
                                                    , dist_mat = as.matrix(bio_dist)
                                                    , n_sample = 30
                                                    )
                                 )
                ) |>
  dplyr::select(-clusters) |>
  tidyr::unnest(cols = c(gap))

# explore -------

clusters_explore <- clusters_summarise |>
  dplyr::left_join(clusters_freq) |>
  dplyr::left_join(clusters_ind_val) |>
  dplyr::left_join(clusters_sil) |>
  dplyr::left_join(clusters_gap)

# find a good clustering ---------
best <- clusters_explore |>
  ## min_clust_size is larger than x sites
  dplyr::filter(min_clust_size > 3) |>
  ## most clusters have an indicator
  dplyr::filter(prop_ind_clusters > 0.8) |>
  ## high macro_sil
  dplyr::filter(macro_sil > quantile(macro_sil, probs = 0.5)) |>
  ## high macro_gap
  dplyr::filter(macro_gap > quantile(macro_gap, probs = 0.5)) |>
  ## low wss
  dplyr::filter(macro_wss < quantile(macro_wss, probs = 0.5))

## dendogram --------
dend <- decorate_dend(clust_df = best$clusters[[1]]
                  , dist_obj = bio_dist
                  , method = best$method[[1]]
                  , second_group_col = "Moisture"
                  , label_col = "Moisture"
                  )

plot(dend$dend)

## silhouette plot ---------

make_sil_plot(best$sil[[1]])
}
